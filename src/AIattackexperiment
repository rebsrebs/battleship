 // AI Attack
 const attack = (board) => {
  console.log('AI is attacking')
  let possibleMoves = board.getPossible();


  // find the first cell on the board that has class 'cell-hit-ship'
  let hitCell = document.querySelector('.cell-hit-ship');


  // if there is a hit but not sunk cell - find adjacent cell to fire on
  if (hitCell != null) {

    let hitCellID = hitCell.id; //example gb1-74
    let hitCoords = board.getCells()[hitCellID.slice(4)]; // example [1,2]
    
    console.log(`hitCoords is:`)
    console.log(hitCoords);
    let hitX = Number(hitCoords[0]);
    let hitY = Number(hitCoords[1]);
    // check if you can try X + 1
    if (hitX + 1 < 10) {
      console.log('hitX + 1 is < 10')
      let adjCoords = [hitX + 1, hitY];
      if (possibleMoves().some((item) => (item[0] === adjCoords[0] && item[1] === adjCoords[1])) == true) {
        console.log('Adjacent cell found in possible moves.')
        return board.receiveAttack(adjCoords[0],adjCoords[1]);
      }
    // else if you can try X - 1
    } else if (hitX - 1 > 0) {
      console.log('hitX - 1 is > 0')
      let adjCoords = [hitX - 1, hitY];
      if (possibleMoves().some((item) => (item[0] === adjCoords[0] && item[1] === adjCoords[1])) == true) {
        console.log('Adjacent cell found in possible moves.')
        return board.receiveAttack(adjCoords[0],adjCoords[1]);
      }
    } else if (hitY + 1 < 10) {
      console.log('hitY + 1 is < 10')
      let adjCoords = [hitX, hitY + 1];
      if (possibleMoves().some((item) => (item[0] === adjCoords[0] && item[1] === adjCoords[1])) == true) {
        console.log('Adjacent cell found in possible moves.')
        return board.receiveAttack(adjCoords[0],adjCoords[1]);
      }
    } else if (hitY - 1 > 0) {
      console.log('hitY - 1 is > 0')
      let adjCoords = [hitX, hitY -1];
      if (possibleMoves.some((item) => (item[0] === adjCoords[0] && item[1] === adjCoords[1])) == true) {
        console.log('Adjacent cell found in possible moves.')
        return board.receiveAttack(adjCoords[0],adjCoords[1]);
      }
      // for now random move
    } else {
    let shot = possibleMoves[Math.floor(Math.random()*possibleMoves.length)];
    let a = shot[0];
    let b = shot[1];
    return board.receiveAttack(a,b);
    }
    // end possible adjacent moves
  // if there are not hit cells - make a random move
  } else {
    let shot = possibleMoves[Math.floor(Math.random()*possibleMoves.length)];
    let a = shot[0];
    let b = shot[1];
    return board.receiveAttack(a,b);
  }
} // End AI Attack
